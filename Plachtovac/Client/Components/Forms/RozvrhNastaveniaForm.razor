@using Blazorise;
@using Plachtovac.Client.Helpers
@using Plachtovac.Shared.BO

<Field>
    <FieldLabel>Názov</FieldLabel>
    <TextEdit @bind-Text="@nazovRozvrhu" Placeholder="Názov rozvrhu" />
</Field>

<Field>
    <FieldLabel>Počet dní</FieldLabel>
    <Addons>
        <Addon AddonType="AddonType.Body">
            <TextEdit IsPlaintext="true" IsReadonly="true" @bind-Text="@dniStr" />
        </Addon>
        <Addon AddonType="AddonType.End">
            <Buttons>
                <Button @onclick="PridajDen" Color="Color.Success" style="width:35px">+</Button>
                <Button @onclick="OdoberDen" Color="Color.Danger" style="width:35px">-</Button>
            </Buttons>
        </Addon>
    </Addons>
    <FieldHelp>Ak zmenšíte počet dní, niektoré aktivity môžu byť odstránené</FieldHelp>
</Field>

<Field>
    <FieldLabel>Začiatok sústredenia@(Zaciatok != default ? $" - {DniVTyzdni.GetDen((int) Zaciatok.Value.DayOfWeek)}" : "")</FieldLabel>
    <DateEdit TValue="DateTime?" @bind-Date="@Zaciatok" />
</Field>

<Field>
    <FieldLabel>Začiatok dňa</FieldLabel>
    <TextEdit @bind-Text="@ZaciatokDna" type="time" />
</Field>

<Field>
    <FieldLabel>Koniec dňa</FieldLabel>
    <TextEdit @bind-Text="@KoniecDna" type="time" />
</Field>
<Field>
    <FieldLabel>Farba</FieldLabel>
    <input type="color" @bind="@Farba" />
</Field>
<Field>
    <FieldLabel>Program</FieldLabel>
    <MemoEdit @bind-Text="@Program" Placeholder="8:00 nejaky program&#10;10:00 iny&#10;15:00 posledny" />
</Field>

<Field>
    <FieldLabel>Čo doniest</FieldLabel>
    <MemoEdit @bind-Text="@CoDoniest" />
</Field>

<Field>
    <FieldLabel>A ešte</FieldLabel>
    <MemoEdit @bind-Text="@AEste" />
</Field>

@if (errors != null)
{
    <Alert Color="Color.Danger">
        @errors
    </Alert>
}


<button @onclick="SubmitForm" class="btn btn-primary">Submit</button>
<button @onclick="Cancel" class="btn btn-secondary">Cancel</button>

@code {

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public Rozvrh Rozvrh { get; set; }

    private string errors = null;

    private string nazovRozvrhu;

    private int dni;

    public string Program { get; set; }
    public string CoDoniest { get; set; }
    public string AEste { get; set; }
    public string Farba { get; set; }

    private string dniStr
    {
        get => dni.ToString();
        set { }
    }


    private DateTime? Zaciatok { get; set; }

    private string _zaciatokDna;

    private string ZaciatokDna
    {
        get => _zaciatokDna;
        set
        {
            _zaciatokDna = value;
            OnTimeChanged();
        }

    }

    private string _koniecDna;
    private string KoniecDna
    {
        get => _koniecDna;
        set
        {
            _koniecDna = value;
            OnTimeChanged();
        }

    }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            nazovRozvrhu = Rozvrh.Nazov;
            dni = Rozvrh.PocetDni;
            Zaciatok = Rozvrh.ZaciatokRozvrhu;
            _zaciatokDna = Rozvrh.ZaciatokDna.ToString(@"hh\:mm");
            _koniecDna = Rozvrh.KoniecDna.ToString(@"hh\:mm");
            Program = Rozvrh.Program;
            CoDoniest = Rozvrh.CoDoniest;
            AEste = Rozvrh.AEste;
            Farba = Rozvrh.Farba;
            StateHasChanged();
        }
    }


    void PridajDen()
    {
        dni++;
    }

    void OdoberDen()
    {
        if (dni > 0)
            dni--;
    }

    async Task SubmitForm()
    {
        if (errors == null)
        {
            Rozvrh.Nazov = nazovRozvrhu;
            Rozvrh.ZaciatokRozvrhu = Zaciatok;
            Rozvrh.NastavPocetDni(dni);
            Rozvrh.ZaciatokDna = ParseTime(_zaciatokDna);
            Rozvrh.KoniecDna = ParseTime(_koniecDna);
            Rozvrh.Program = Program;
            Rozvrh.Farba = Farba;
            Rozvrh.CoDoniest = CoDoniest;
            Rozvrh.AEste = AEste;
            await BlazoredModal.CloseAsync(ModalResult.Ok(Rozvrh));
        }
    }

    private TimeSpan ParseTime(string timeStr)
    {
        return Converters.FromTimeStr(timeStr);
    }

    private void OnTimeChanged()
    {
        if (ParseTime(_zaciatokDna) >= ParseTime(_koniecDna))
        {
            errors = "Nesprávne zvolená kombinácia začiatku a konca dňa";
        }
        else
        {
            errors = null;
        }

    }

    async Task Cancel()
    {
        await BlazoredModal.CancelAsync();
    }


}
